"""
GitHub Integration API Endpoints
"""
from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel
from typing import Optional, List

from services.github import get_github_service, GitHubCard
from agent.checkpointing import get_session_manager

router = APIRouter(prefix="/api/github", tags=["github"])


class ExportToGitHubRequest(BaseModel):
    session_id: str
    feature_title: str
    project_column: str = "Backlog"  # "Backlog", "Sprint", "Roadmap"
    repository: Optional[str] = None


@router.post("/export")
async def export_to_github(request: ExportToGitHubRequest):
    """
    Export specification to GitHub Projects as a card.
    
    Creates a card in the specified project column.
    For multi-spec features, creates multiple linked cards.
    """
    session_manager = get_session_manager()
    github_service = get_github_service()
    
    # Get session state
    state = await session_manager.get_session_state(request.session_id)
    
    if not state:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Session {request.session_id} not found"
        )
    
    # Check if multi-spec
    is_multi_spec = state.get("is_multi_spec", False)
    
    if is_multi_spec:
        # Create multiple cards
        multi_spec_details = state.get("multi_spec_details", {})
        specs = multi_spec_details.get("specs", [])
        
        cards = await github_service.create_multi_spec_cards(
            specs=specs,
            base_title=request.feature_title
        )
        
        return {
            "status": "success",
            "type": "multi_spec",
            "cards": cards,
            "count": len(cards)
        }
    
    else:
        # Create single card
        spec_sections = state.get("spec_sections", {})
        
        # Format body from spec sections
        body_lines = []
        for section_key, content in spec_sections.items():
            if content and content.strip():
                body_lines.append(f"### {section_key}")
                body_lines.append(content.strip())
                body_lines.append("")
        
        card = GitHubCard(
            title=request.feature_title,
            body="\n".join(body_lines) or "Specification generated by Context2Task",
            project_column=request.project_column,
            labels=["context2task", "automated"],
            repository=request.repository
        )
        
        result = await github_service.create_project_card(card)
        
        return {
            "status": "success",
            "type": "single",
            "card": result
        }


@router.get("/status")
async def github_status():
    """Check GitHub integration status"""
    github_service = get_github_service()
    
    return {
        "enabled": bool(github_service.token),
        "organization": github_service.org,
        "project_number": github_service.project_number
    }


